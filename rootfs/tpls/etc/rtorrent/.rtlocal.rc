# Launch as a daemon
system.daemon.set = true

# Instance layout
method.insert = cfg.basedir,  private|const|string, (cat,"/config/rtorrent/")
method.insert = cfg.download, private|const|string, (cat,"/downloads/")
method.insert = cfg.logs,     private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
method.insert = cfg.watch,    private|const|string, (cat,(cfg.basedir),"watch/")
method.insert = cfg.rundir,   private|const|string, (cat,"/var/run/rtorrent/")

## Create instance directories
execute.throw = sh, -c, (cat,\
    "mkdir -p \"",(cfg.download),"\" ",\
    "\"",(cfg.logs),"\" ",\
    "\"",(cfg.session),"\" ",\
    "\"",(cfg.watch),"/load\" ",\
    "\"",(cfg.watch),"/start\" ")

## Some additional values and commands
method.insert = system.startup_time, value|const, (system.time)

# Gets the full path of data of a torrent (it's a workaround for the possibly empty 'd.base_path' attribute)
method.insert = d.data_path, simple,\
    "if=(d.is_multi_file),\
        (cat, (d.directory), /),\
       	(cat, (d.directory), /, (d.name))"
method.insert = d.session_file, simple, "cat=(session.path), (d.hash), .torrent"

# Default directory to save the downloaded torrents
directory.default.set = (cat,(cfg.download))

# Default session directory
session.path.set = (cat,(cfg.session))

# PID file
execute.nothrow = sh,-c,(cat,"echo >",(cfg.rundir),"rtorrent.pid"," ",(system.pid))

# SCGI socket and make it group-writable and secure
network.scgi.open_local = (cat, (cfg.rundir), "scgi.socket")
schedule2 = scgi_permission, 0, 0, (cat,"execute.nothrow=chmod,\"g+w,o=\",",(cfg.rundir),"scgi.socket")
#scgi_port = 0.0.0.0:8000

# Listening port for incoming peer traffic
network.port_range.set = @RT_INC_PORT@-@RT_INC_PORT@
network.port_random.set = no

# UDP port to use for DHT
dht.port.set = @RT_DHT_PORT@

# XMLRPC size limit
network.xmlrpc.size_limit.set = @XMLRPC_SIZE_LIMIT@

# Configure session saving interval to balance disk usage and torrent information accuracy
schedule2 = session_save, 1200, @RT_SESSION_SAVE_SECONDS@, ((session.save))

# Save torrents immediately to prevent losing them between session saving intervals
method.set_key = event.download.inserted, 2_save_session, ((d.save_full_session))

# Configure whether to delay tracker announces at startup
trackers.delay_scrape = @RT_TRACKER_DELAY_SCRAPE@

# Logging
## levels = critical error warn notice info debug
## groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
log.open_file = "log",(cfg.logfile)
log.add_output = "@RT_LOG_LEVEL@","log"
log.add_output = "rpc_events","log"
#log.add_output = "tracker_debug","log"
#log.execute = (cat,(cfg.logs),"execute.log")
#log.xmlrpc = (cat,(cfg.logs),"xmlrpc.log")

# Initialize plugins
execute2 = {sh,-c,/usr/bin/php82 /var/www/rutorrent/php/initplugins.php rtorrent &}
